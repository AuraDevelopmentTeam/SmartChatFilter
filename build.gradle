import groovy.json.StringEscapeUtils
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "ua.eshepelyuk.ManifestClasspath" version "1.0.0"
}

apply from: "GradleCommon/common.gradle"

apply plugin: "application"

mainClassName = "dev.aura.smartchatfilter.Main"
ext.runDir = "run"
def licenseHeader = file("LICENSE_HEADER.txt")

repositories {
    // Additional repositories
}

dependencies {
    // Log4J
    compile "com.lmax:disruptor:${disruptor_version}"
    compile "org.apache.logging.log4j:log4j-core:${log4j_version}"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    compile "org.fusesource.jansi:jansi:${jansi_version}"

    // DeepLearning4J
    compile "org.nd4j:nd4j-native-platform:${nd4j_version}"

    compile "org.deeplearning4j:deeplearning4j-core:${d4j_version}"
    compile("org.deeplearning4j:deeplearning4j-parallel-wrapper_2.11:${d4j_version}") {
        exclude group: "ch.qos.logback"
    }
    compile "org.deeplearning4j:deeplearning4j-data:${d4j_version}"

    // Extra DeepLearning4J stuff
    compile "org.deeplearning4j:arbiter-deeplearning4j:${arbiter_version}"
    compile "org.deeplearning4j:deeplearning4j-ui_2.11:${d4j_version}"

    // Misc
    compile "commons-cli:commons-cli:${commonsCLI_version}"
}

spotless.java {
    licenseHeaderFile licenseHeader
}

processSources {
    filteringCharset = "UTF-8"

    filter (ReplaceTokens, tokens: [
        "license": StringEscapeUtils.escapeJava(licenseHeader.text.replaceAll("^/\\*\\n| \\*(?: |/)?", ""))
    ])
}

jar {
    classifier = null

    manifest {
        attributes(
            "Specification-Title": pluginName,
            "Specification-Version": version,
            "Specification-Vendor": "Aura Development Team",
            "Implementation-Title": pluginName,
            "Implementation-Version": version,
            "Implementation-Vendor": "Aura Development Team",
            "Main-Class": mainClassName
        )
    }
}

test {
    workingDir = runDir
    systemProperty "log4j.skipJansi", "true"

    doFirst {
        file(workingDir).mkdirs()
    }
}

run {
    workingDir = runDir

    if(project.hasProperty("args")) {
        args project.args.split()
    }

    doFirst {
        file(workingDir).mkdirs()
    }
}
